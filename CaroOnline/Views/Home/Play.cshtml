@using CaroOnline.Models
@model Cell[,]
@{
    ViewBag.Title = "Play";
}
<img src="~/Content/o.png" style="display:none" id="imgO" />
<img src="~/Content/x.png" style="display:none" id="imgX" />
<div class="col-6" style="">
    <div class="card rounded" style="width:630px;height:630px">
        <canvas id="TableChess" class="rounded" width="630" height="630" style="border:1px solid #d3d3d3;cursor:pointer;user-select: none;"></canvas>
        @*onclick="storeGuess(event)"*@
    </div>
</div>
<div class="col-3">
    <h2 id="test"></h2>
</div>
@section js{
    <script>
        class Cell{

           constructor(x, y,Owner) {
                this.x = x;
                this.y = y;
                this.Owner = Owner;
           }

        }
        

    </script>

    <script>
        //crate chessboard
        //var t=;
        var ArrMaxtrix = [];
        for (var i = 0; i < 21; i++) {
            var arr1 = [];
            for (var j = 0; j < 21; j++) {
                arr1.push(new Cell(i, j, 0));
            }
            ArrMaxtrix.push(arr1);
            
        }




        var cell = 30;
        var canvas = document.getElementById('TableChess');
        var context = canvas.getContext('2d');
        var imgX = document.getElementById("imgX");
        var imgY = document.getElementById("imgY");

        canvas.addEventListener('click', function (evt) {
            var rect = canvas.getBoundingClientRect();
            var mouseX = evt.clientX - rect.left -0.5;
            var mouseY = evt.clientY - rect.top;
            $('#test').text(mouseX + " | " + mouseY);
            if (mouseX % 30 == 0 || mouseY % 30 == 0) {
                return;
            }
            var i = Math.floor(mouseX / 30), j = Math.floor(mouseY / 30);

            if (ArrMaxtrix[i][j].Owner == 0) {
                context.drawImage(imgX, (i * 30) + 3, (j * 30) + 3, 23, 23);
                ArrMaxtrix[i][j].Owner=1
            }
        }, false);
        var oldX=-1, oldY=-1;
        canvas.addEventListener('mousemove', function (evt) {
            var rect = canvas.getBoundingClientRect();
            var mouseX = evt.clientX - rect.left - 0.5;
            var mouseY = evt.clientY - rect.top;
            if (mouseX % 30 == 0 || mouseY % 30 == 0) {
                return;
            }
            
            var oi = Math.floor(oldX / 30), oj = Math.floor(oldY / 30);
            var i = Math.floor(mouseX / 30), j = Math.floor(mouseY / 30);
            if (oi != -1 || oj != -1) {
                if (oi != i || oj != j) {

                    if (ArrMaxtrix[oi][oj].Owner == 0) {
                        context.fillStyle = "white";
                        context.fillRect((oi * 30) + 3, (oj * 30) + 3, 23, 23);
                        oldX = mouseX;
                        oldY = mouseY;
                    }
                }
            }
            oldX = mouseX;
            oldY = mouseY;
            if (ArrMaxtrix[i][j].Owner == 0) {
                context.drawImage(imgX, (i * 30) + 3, (j * 30) + 3, 23, 23);
            }
                
            $('#test').text(mouseX + " | " + mouseY);
            
        }, false);
        context.beginPath();
        
        for (var i = 0; i < 21; i++) {
            context.moveTo(i * cell, 0);
            context.lineTo(i * cell, 630);
        }
        for (var i = 0; i < 21; i++) {
            context.moveTo(0, i * cell);
            context.lineTo(630, i * cell);
        }

        context.closePath();
        context.lineWidth = 1;
        context.strokeStyle = '#3f51b5';
        context.stroke();

    </script>
}